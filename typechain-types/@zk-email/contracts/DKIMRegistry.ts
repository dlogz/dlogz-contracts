/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DKIMRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dkimPublicKeyHashes"
      | "isDKIMPublicKeyHashValid"
      | "owner"
      | "renounceOwnership"
      | "revokeDKIMPublicKeyHash"
      | "revokedDKIMPublicKeyHashes"
      | "setDKIMPublicKeyHash"
      | "setDKIMPublicKeyHashes"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DKIMPublicKeyHashRegistered"
      | "DKIMPublicKeyHashRevoked"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dkimPublicKeyHashes",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDKIMPublicKeyHashValid",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDKIMPublicKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedDKIMPublicKeyHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDKIMPublicKeyHash",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDKIMPublicKeyHashes",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "dkimPublicKeyHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDKIMPublicKeyHashValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDKIMPublicKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedDKIMPublicKeyHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDKIMPublicKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDKIMPublicKeyHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DKIMPublicKeyHashRegisteredEvent {
  export type InputTuple = [domainName: string, publicKeyHash: BytesLike];
  export type OutputTuple = [domainName: string, publicKeyHash: string];
  export interface OutputObject {
    domainName: string;
    publicKeyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DKIMPublicKeyHashRevokedEvent {
  export type InputTuple = [publicKeyHash: BytesLike];
  export type OutputTuple = [publicKeyHash: string];
  export interface OutputObject {
    publicKeyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DKIMRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DKIMRegistry;
  waitForDeployment(): Promise<this>;

  interface: DKIMRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dkimPublicKeyHashes: TypedContractMethod<
    [arg0: string, arg1: BytesLike],
    [boolean],
    "view"
  >;

  isDKIMPublicKeyHashValid: TypedContractMethod<
    [domainName: string, publicKeyHash: BytesLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeDKIMPublicKeyHash: TypedContractMethod<
    [publicKeyHash: BytesLike],
    [void],
    "nonpayable"
  >;

  revokedDKIMPublicKeyHashes: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  setDKIMPublicKeyHash: TypedContractMethod<
    [domainName: string, publicKeyHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setDKIMPublicKeyHashes: TypedContractMethod<
    [domainName: string, publicKeyHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dkimPublicKeyHashes"
  ): TypedContractMethod<[arg0: string, arg1: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDKIMPublicKeyHashValid"
  ): TypedContractMethod<
    [domainName: string, publicKeyHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeDKIMPublicKeyHash"
  ): TypedContractMethod<[publicKeyHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokedDKIMPublicKeyHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setDKIMPublicKeyHash"
  ): TypedContractMethod<
    [domainName: string, publicKeyHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDKIMPublicKeyHashes"
  ): TypedContractMethod<
    [domainName: string, publicKeyHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DKIMPublicKeyHashRegistered"
  ): TypedContractEvent<
    DKIMPublicKeyHashRegisteredEvent.InputTuple,
    DKIMPublicKeyHashRegisteredEvent.OutputTuple,
    DKIMPublicKeyHashRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DKIMPublicKeyHashRevoked"
  ): TypedContractEvent<
    DKIMPublicKeyHashRevokedEvent.InputTuple,
    DKIMPublicKeyHashRevokedEvent.OutputTuple,
    DKIMPublicKeyHashRevokedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DKIMPublicKeyHashRegistered(string,bytes32)": TypedContractEvent<
      DKIMPublicKeyHashRegisteredEvent.InputTuple,
      DKIMPublicKeyHashRegisteredEvent.OutputTuple,
      DKIMPublicKeyHashRegisteredEvent.OutputObject
    >;
    DKIMPublicKeyHashRegistered: TypedContractEvent<
      DKIMPublicKeyHashRegisteredEvent.InputTuple,
      DKIMPublicKeyHashRegisteredEvent.OutputTuple,
      DKIMPublicKeyHashRegisteredEvent.OutputObject
    >;

    "DKIMPublicKeyHashRevoked(bytes32)": TypedContractEvent<
      DKIMPublicKeyHashRevokedEvent.InputTuple,
      DKIMPublicKeyHashRevokedEvent.OutputTuple,
      DKIMPublicKeyHashRevokedEvent.OutputObject
    >;
    DKIMPublicKeyHashRevoked: TypedContractEvent<
      DKIMPublicKeyHashRevokedEvent.InputTuple,
      DKIMPublicKeyHashRevokedEvent.OutputTuple,
      DKIMPublicKeyHashRevokedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
