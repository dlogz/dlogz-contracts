/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface CommandUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DECIMALS_MATCHER"
      | "ETH_ADDR_MATCHER"
      | "INT_MATCHER"
      | "STRING_MATCHER"
      | "UINT_MATCHER"
      | "bytesToHexString"
      | "computeExpectedCommand"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMALS_MATCHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_ADDR_MATCHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INT_MATCHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STRING_MATCHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UINT_MATCHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToHexString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeExpectedCommand",
    values: [BytesLike[], string[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMALS_MATCHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_ADDR_MATCHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INT_MATCHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STRING_MATCHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UINT_MATCHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesToHexString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeExpectedCommand",
    data: BytesLike
  ): Result;
}

export interface CommandUtils extends BaseContract {
  connect(runner?: ContractRunner | null): CommandUtils;
  waitForDeployment(): Promise<this>;

  interface: CommandUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DECIMALS_MATCHER: TypedContractMethod<[], [string], "view">;

  ETH_ADDR_MATCHER: TypedContractMethod<[], [string], "view">;

  INT_MATCHER: TypedContractMethod<[], [string], "view">;

  STRING_MATCHER: TypedContractMethod<[], [string], "view">;

  UINT_MATCHER: TypedContractMethod<[], [string], "view">;

  bytesToHexString: TypedContractMethod<[data: BytesLike], [string], "view">;

  computeExpectedCommand: TypedContractMethod<
    [commandParams: BytesLike[], template: string[], stringCase: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DECIMALS_MATCHER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ETH_ADDR_MATCHER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INT_MATCHER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STRING_MATCHER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UINT_MATCHER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bytesToHexString"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "computeExpectedCommand"
  ): TypedContractMethod<
    [commandParams: BytesLike[], template: string[], stringCase: BigNumberish],
    [string],
    "view"
  >;

  filters: {};
}
