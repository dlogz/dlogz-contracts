/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type EmailProofStruct = {
  domainName: string;
  publicKeyHash: BytesLike;
  timestamp: BigNumberish;
  maskedCommand: string;
  emailNullifier: BytesLike;
  accountSalt: BytesLike;
  isCodeExist: boolean;
  proof: BytesLike;
};

export type EmailProofStructOutput = [
  domainName: string,
  publicKeyHash: string,
  timestamp: bigint,
  maskedCommand: string,
  emailNullifier: string,
  accountSalt: string,
  isCodeExist: boolean,
  proof: string
] & {
  domainName: string;
  publicKeyHash: string;
  timestamp: bigint;
  maskedCommand: string;
  emailNullifier: string;
  accountSalt: string;
  isCodeExist: boolean;
  proof: string;
};

export type EmailAuthMsgStruct = {
  templateId: BigNumberish;
  commandParams: BytesLike[];
  skippedCommandPrefix: BigNumberish;
  proof: EmailProofStruct;
};

export type EmailAuthMsgStructOutput = [
  templateId: bigint,
  commandParams: string[],
  skippedCommandPrefix: bigint,
  proof: EmailProofStructOutput
] & {
  templateId: bigint;
  commandParams: string[];
  skippedCommandPrefix: bigint;
  proof: EmailProofStructOutput;
};

export interface EmailAuthInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "accountSalt"
      | "authEmail"
      | "commandTemplates"
      | "controller"
      | "deleteCommandTemplate"
      | "dkimRegistryAddr"
      | "getCommandTemplate"
      | "initDKIMRegistry"
      | "initVerifier"
      | "initialize"
      | "insertCommandTemplate"
      | "lastTimestamp"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setTimestampCheckEnabled"
      | "timestampCheckEnabled"
      | "transferOwnership"
      | "updateCommandTemplate"
      | "updateDKIMRegistry"
      | "updateVerifier"
      | "upgradeToAndCall"
      | "usedNullifiers"
      | "verifierAddr"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommandTemplateDeleted"
      | "CommandTemplateInserted"
      | "CommandTemplateUpdated"
      | "DKIMRegistryUpdated"
      | "EmailAuthed"
      | "Initialized"
      | "OwnershipTransferred"
      | "TimestampCheckEnabled"
      | "Upgraded"
      | "VerifierUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountSalt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authEmail",
    values: [EmailAuthMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "commandTemplates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCommandTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dkimRegistryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommandTemplate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initDKIMRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insertCommandTemplate",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTimestampCheckEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampCheckEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCommandTemplate",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDKIMRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifierAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authEmail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commandTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteCommandTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dkimRegistryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommandTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initDKIMRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insertCommandTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimestampCheckEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampCheckEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCommandTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDKIMRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifierAddr",
    data: BytesLike
  ): Result;
}

export namespace CommandTemplateDeletedEvent {
  export type InputTuple = [templateId: BigNumberish];
  export type OutputTuple = [templateId: bigint];
  export interface OutputObject {
    templateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommandTemplateInsertedEvent {
  export type InputTuple = [templateId: BigNumberish];
  export type OutputTuple = [templateId: bigint];
  export interface OutputObject {
    templateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommandTemplateUpdatedEvent {
  export type InputTuple = [templateId: BigNumberish];
  export type OutputTuple = [templateId: bigint];
  export interface OutputObject {
    templateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DKIMRegistryUpdatedEvent {
  export type InputTuple = [dkimRegistry: AddressLike];
  export type OutputTuple = [dkimRegistry: string];
  export interface OutputObject {
    dkimRegistry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmailAuthedEvent {
  export type InputTuple = [
    emailNullifier: BytesLike,
    accountSalt: BytesLike,
    isCodeExist: boolean,
    templateId: BigNumberish
  ];
  export type OutputTuple = [
    emailNullifier: string,
    accountSalt: string,
    isCodeExist: boolean,
    templateId: bigint
  ];
  export interface OutputObject {
    emailNullifier: string;
    accountSalt: string;
    isCodeExist: boolean;
    templateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimestampCheckEnabledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierUpdatedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmailAuth extends BaseContract {
  connect(runner?: ContractRunner | null): EmailAuth;
  waitForDeployment(): Promise<this>;

  interface: EmailAuthInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  accountSalt: TypedContractMethod<[], [string], "view">;

  authEmail: TypedContractMethod<
    [emailAuthMsg: EmailAuthMsgStruct],
    [void],
    "nonpayable"
  >;

  commandTemplates: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  controller: TypedContractMethod<[], [string], "view">;

  deleteCommandTemplate: TypedContractMethod<
    [_templateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  dkimRegistryAddr: TypedContractMethod<[], [string], "view">;

  getCommandTemplate: TypedContractMethod<
    [_templateId: BigNumberish],
    [string[]],
    "view"
  >;

  initDKIMRegistry: TypedContractMethod<
    [_dkimRegistryAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  initVerifier: TypedContractMethod<
    [_verifierAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _initialOwner: AddressLike,
      _accountSalt: BytesLike,
      _controller: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  insertCommandTemplate: TypedContractMethod<
    [_templateId: BigNumberish, _commandTemplate: string[]],
    [void],
    "nonpayable"
  >;

  lastTimestamp: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTimestampCheckEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  timestampCheckEnabled: TypedContractMethod<[], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCommandTemplate: TypedContractMethod<
    [_templateId: BigNumberish, _commandTemplate: string[]],
    [void],
    "nonpayable"
  >;

  updateDKIMRegistry: TypedContractMethod<
    [_dkimRegistryAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVerifier: TypedContractMethod<
    [_verifierAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usedNullifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifierAddr: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountSalt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authEmail"
  ): TypedContractMethod<
    [emailAuthMsg: EmailAuthMsgStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commandTemplates"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deleteCommandTemplate"
  ): TypedContractMethod<[_templateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dkimRegistryAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCommandTemplate"
  ): TypedContractMethod<[_templateId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "initDKIMRegistry"
  ): TypedContractMethod<
    [_dkimRegistryAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initVerifier"
  ): TypedContractMethod<[_verifierAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _initialOwner: AddressLike,
      _accountSalt: BytesLike,
      _controller: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertCommandTemplate"
  ): TypedContractMethod<
    [_templateId: BigNumberish, _commandTemplate: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimestampCheckEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timestampCheckEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCommandTemplate"
  ): TypedContractMethod<
    [_templateId: BigNumberish, _commandTemplate: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDKIMRegistry"
  ): TypedContractMethod<
    [_dkimRegistryAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVerifier"
  ): TypedContractMethod<[_verifierAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usedNullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifierAddr"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CommandTemplateDeleted"
  ): TypedContractEvent<
    CommandTemplateDeletedEvent.InputTuple,
    CommandTemplateDeletedEvent.OutputTuple,
    CommandTemplateDeletedEvent.OutputObject
  >;
  getEvent(
    key: "CommandTemplateInserted"
  ): TypedContractEvent<
    CommandTemplateInsertedEvent.InputTuple,
    CommandTemplateInsertedEvent.OutputTuple,
    CommandTemplateInsertedEvent.OutputObject
  >;
  getEvent(
    key: "CommandTemplateUpdated"
  ): TypedContractEvent<
    CommandTemplateUpdatedEvent.InputTuple,
    CommandTemplateUpdatedEvent.OutputTuple,
    CommandTemplateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DKIMRegistryUpdated"
  ): TypedContractEvent<
    DKIMRegistryUpdatedEvent.InputTuple,
    DKIMRegistryUpdatedEvent.OutputTuple,
    DKIMRegistryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EmailAuthed"
  ): TypedContractEvent<
    EmailAuthedEvent.InputTuple,
    EmailAuthedEvent.OutputTuple,
    EmailAuthedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TimestampCheckEnabled"
  ): TypedContractEvent<
    TimestampCheckEnabledEvent.InputTuple,
    TimestampCheckEnabledEvent.OutputTuple,
    TimestampCheckEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierUpdated"
  ): TypedContractEvent<
    VerifierUpdatedEvent.InputTuple,
    VerifierUpdatedEvent.OutputTuple,
    VerifierUpdatedEvent.OutputObject
  >;

  filters: {
    "CommandTemplateDeleted(uint256)": TypedContractEvent<
      CommandTemplateDeletedEvent.InputTuple,
      CommandTemplateDeletedEvent.OutputTuple,
      CommandTemplateDeletedEvent.OutputObject
    >;
    CommandTemplateDeleted: TypedContractEvent<
      CommandTemplateDeletedEvent.InputTuple,
      CommandTemplateDeletedEvent.OutputTuple,
      CommandTemplateDeletedEvent.OutputObject
    >;

    "CommandTemplateInserted(uint256)": TypedContractEvent<
      CommandTemplateInsertedEvent.InputTuple,
      CommandTemplateInsertedEvent.OutputTuple,
      CommandTemplateInsertedEvent.OutputObject
    >;
    CommandTemplateInserted: TypedContractEvent<
      CommandTemplateInsertedEvent.InputTuple,
      CommandTemplateInsertedEvent.OutputTuple,
      CommandTemplateInsertedEvent.OutputObject
    >;

    "CommandTemplateUpdated(uint256)": TypedContractEvent<
      CommandTemplateUpdatedEvent.InputTuple,
      CommandTemplateUpdatedEvent.OutputTuple,
      CommandTemplateUpdatedEvent.OutputObject
    >;
    CommandTemplateUpdated: TypedContractEvent<
      CommandTemplateUpdatedEvent.InputTuple,
      CommandTemplateUpdatedEvent.OutputTuple,
      CommandTemplateUpdatedEvent.OutputObject
    >;

    "DKIMRegistryUpdated(address)": TypedContractEvent<
      DKIMRegistryUpdatedEvent.InputTuple,
      DKIMRegistryUpdatedEvent.OutputTuple,
      DKIMRegistryUpdatedEvent.OutputObject
    >;
    DKIMRegistryUpdated: TypedContractEvent<
      DKIMRegistryUpdatedEvent.InputTuple,
      DKIMRegistryUpdatedEvent.OutputTuple,
      DKIMRegistryUpdatedEvent.OutputObject
    >;

    "EmailAuthed(bytes32,bytes32,bool,uint256)": TypedContractEvent<
      EmailAuthedEvent.InputTuple,
      EmailAuthedEvent.OutputTuple,
      EmailAuthedEvent.OutputObject
    >;
    EmailAuthed: TypedContractEvent<
      EmailAuthedEvent.InputTuple,
      EmailAuthedEvent.OutputTuple,
      EmailAuthedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TimestampCheckEnabled(bool)": TypedContractEvent<
      TimestampCheckEnabledEvent.InputTuple,
      TimestampCheckEnabledEvent.OutputTuple,
      TimestampCheckEnabledEvent.OutputObject
    >;
    TimestampCheckEnabled: TypedContractEvent<
      TimestampCheckEnabledEvent.InputTuple,
      TimestampCheckEnabledEvent.OutputTuple,
      TimestampCheckEnabledEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VerifierUpdated(address)": TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
    VerifierUpdated: TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
  };
}
