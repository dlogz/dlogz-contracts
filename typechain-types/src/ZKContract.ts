/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type EmailProofStruct = {
  domainName: string;
  publicKeyHash: BytesLike;
  timestamp: BigNumberish;
  maskedCommand: string;
  emailNullifier: BytesLike;
  accountSalt: BytesLike;
  isCodeExist: boolean;
  proof: BytesLike;
};

export type EmailProofStructOutput = [
  domainName: string,
  publicKeyHash: string,
  timestamp: bigint,
  maskedCommand: string,
  emailNullifier: string,
  accountSalt: string,
  isCodeExist: boolean,
  proof: string
] & {
  domainName: string;
  publicKeyHash: string;
  timestamp: bigint;
  maskedCommand: string;
  emailNullifier: string;
  accountSalt: string;
  isCodeExist: boolean;
  proof: string;
};

export type EmailAuthMsgStruct = {
  templateId: BigNumberish;
  commandParams: BytesLike[];
  skippedCommandPrefix: BigNumberish;
  proof: EmailProofStruct;
};

export type EmailAuthMsgStructOutput = [
  templateId: bigint,
  commandParams: string[],
  skippedCommandPrefix: bigint,
  proof: EmailProofStructOutput
] & {
  templateId: bigint;
  commandParams: string[];
  skippedCommandPrefix: bigint;
  proof: EmailProofStructOutput;
};

export interface ZKContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commandTemplates"
      | "computeEmailAuthAddress"
      | "computeTemplateId"
      | "dkim"
      | "dkimAddr"
      | "emailAuthImplementation"
      | "emailAuthImplementationAddr"
      | "emitEmailCommand"
      | "initialize"
      | "userAddress"
      | "userContractAddr"
      | "verifier"
      | "verifierAddr"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LikeBlogEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "commandTemplates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeEmailAuthAddress",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTemplateId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dkim", values?: undefined): string;
  encodeFunctionData(functionFragment: "dkimAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emailAuthImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emailAuthImplementationAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitEmailCommand",
    values: [EmailAuthMsgStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userContractAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifierAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "commandTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeEmailAuthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dkim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dkimAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emailAuthImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emailAuthImplementationAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitEmailCommand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userContractAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifierAddr",
    data: BytesLike
  ): Result;
}

export namespace LikeBlogEventEvent {
  export type InputTuple = [emailAuthAddr: AddressLike, command: string];
  export type OutputTuple = [emailAuthAddr: string, command: string];
  export interface OutputObject {
    emailAuthAddr: string;
    command: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKContract extends BaseContract {
  connect(runner?: ContractRunner | null): ZKContract;
  waitForDeployment(): Promise<this>;

  interface: ZKContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commandTemplates: TypedContractMethod<[], [string[][]], "view">;

  computeEmailAuthAddress: TypedContractMethod<
    [owner: AddressLike, accountSalt: BytesLike],
    [string],
    "view"
  >;

  computeTemplateId: TypedContractMethod<
    [templateIdx: BigNumberish],
    [bigint],
    "view"
  >;

  dkim: TypedContractMethod<[], [string], "view">;

  dkimAddr: TypedContractMethod<[], [string], "view">;

  emailAuthImplementation: TypedContractMethod<[], [string], "view">;

  emailAuthImplementationAddr: TypedContractMethod<[], [string], "view">;

  emitEmailCommand: TypedContractMethod<
    [
      emailAuthMsg: EmailAuthMsgStruct,
      owner: AddressLike,
      templateIdx: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_userContractAddr: AddressLike, _userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  userAddress: TypedContractMethod<[], [string], "view">;

  userContractAddr: TypedContractMethod<[], [string], "view">;

  verifier: TypedContractMethod<[], [string], "view">;

  verifierAddr: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commandTemplates"
  ): TypedContractMethod<[], [string[][]], "view">;
  getFunction(
    nameOrSignature: "computeEmailAuthAddress"
  ): TypedContractMethod<
    [owner: AddressLike, accountSalt: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTemplateId"
  ): TypedContractMethod<[templateIdx: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dkim"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dkimAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emailAuthImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emailAuthImplementationAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emitEmailCommand"
  ): TypedContractMethod<
    [
      emailAuthMsg: EmailAuthMsgStruct,
      owner: AddressLike,
      templateIdx: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_userContractAddr: AddressLike, _userAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userContractAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifierAddr"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LikeBlogEvent"
  ): TypedContractEvent<
    LikeBlogEventEvent.InputTuple,
    LikeBlogEventEvent.OutputTuple,
    LikeBlogEventEvent.OutputObject
  >;

  filters: {
    "LikeBlogEvent(address,string)": TypedContractEvent<
      LikeBlogEventEvent.InputTuple,
      LikeBlogEventEvent.OutputTuple,
      LikeBlogEventEvent.OutputObject
    >;
    LikeBlogEvent: TypedContractEvent<
      LikeBlogEventEvent.InputTuple,
      LikeBlogEventEvent.OutputTuple,
      LikeBlogEventEvent.OutputObject
    >;
  };
}
