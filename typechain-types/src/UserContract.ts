/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace UserContract {
  export type BlogStruct = {
    blobId: string;
    blobHash: string;
    isPublished: boolean;
    status: BigNumberish;
    readabilityScore: BigNumberish;
    estimatedReadTime: BigNumberish;
    tags: string[];
    likes: AddressLike[];
  };

  export type BlogStructOutput = [
    blobId: string,
    blobHash: string,
    isPublished: boolean,
    status: bigint,
    readabilityScore: bigint,
    estimatedReadTime: bigint,
    tags: string[],
    likes: string[]
  ] & {
    blobId: string;
    blobHash: string;
    isPublished: boolean;
    status: bigint;
    readabilityScore: bigint;
    estimatedReadTime: bigint;
    tags: string[];
    likes: string[];
  };
}

export interface UserContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBlog"
      | "adminAddress"
      | "agentAddress"
      | "anonAadhaarVerifierAddr"
      | "blogSlugs"
      | "blogs"
      | "createdTimestamp"
      | "deleteBlog"
      | "getAllBlogSlugs"
      | "getBlogBySlug"
      | "getUserVerificationTime"
      | "hasUserLikedBlog"
      | "isAdult"
      | "isUserAdult"
      | "isUserVerified"
      | "isVerified"
      | "likeBlog"
      | "linkZKContract"
      | "publishBlog"
      | "updateAgentAddress"
      | "updateBlog"
      | "updateBlogMeta"
      | "userAddress"
      | "userNullifier"
      | "verificationTimestamp"
      | "verifyUserProof"
      | "zkContractAddr"
      | "zkFactoryAddr"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlogAdded"
      | "BlogDeleted"
      | "BlogPublished"
      | "BlogUpdated"
      | "UserVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBlog",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "anonAadhaarVerifierAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blogSlugs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "blogs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createdTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deleteBlog", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllBlogSlugs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlogBySlug",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVerificationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserLikedBlog",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isAdult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isUserAdult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likeBlog",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkZKContract",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "publishBlog", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateAgentAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlog",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlogMeta",
    values: [string, string[], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userNullifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verificationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUserProof",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zkContractAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zkFactoryAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addBlog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anonAadhaarVerifierAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blogSlugs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blogs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createdTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteBlog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBlogSlugs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlogBySlug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVerificationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserLikedBlog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserAdult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "likeBlog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkZKContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishBlog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateBlog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlogMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyUserProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkContractAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkFactoryAddr",
    data: BytesLike
  ): Result;
}

export namespace BlogAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    slug: string,
    blobId: string,
    blobHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    slug: string,
    blobId: string,
    blobHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    slug: string;
    blobId: string;
    blobHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlogDeletedEvent {
  export type InputTuple = [
    user: AddressLike,
    slug: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, slug: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    slug: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlogPublishedEvent {
  export type InputTuple = [
    user: AddressLike,
    blobId: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, blobId: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    blobId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlogUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    slug: string,
    newBlobHash: string,
    newBlobId: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    slug: string,
    newBlobHash: string,
    newBlobId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    slug: string;
    newBlobHash: string;
    newBlobId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    timestamp: BigNumberish,
    isAdult: boolean
  ];
  export type OutputTuple = [user: string, timestamp: bigint, isAdult: boolean];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
    isAdult: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserContract extends BaseContract {
  connect(runner?: ContractRunner | null): UserContract;
  waitForDeployment(): Promise<this>;

  interface: UserContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBlog: TypedContractMethod<
    [slug: string, blobId: string, blobHash: string],
    [void],
    "nonpayable"
  >;

  adminAddress: TypedContractMethod<[], [string], "view">;

  agentAddress: TypedContractMethod<[], [string], "view">;

  anonAadhaarVerifierAddr: TypedContractMethod<[], [string], "view">;

  blogSlugs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  blogs: TypedContractMethod<
    [arg0: string],
    [
      [string, string, boolean, bigint, bigint, bigint] & {
        blobId: string;
        blobHash: string;
        isPublished: boolean;
        status: bigint;
        readabilityScore: bigint;
        estimatedReadTime: bigint;
      }
    ],
    "view"
  >;

  createdTimestamp: TypedContractMethod<[], [bigint], "view">;

  deleteBlog: TypedContractMethod<[slug: string], [void], "nonpayable">;

  getAllBlogSlugs: TypedContractMethod<[], [string[]], "view">;

  getBlogBySlug: TypedContractMethod<
    [slug: string],
    [UserContract.BlogStructOutput],
    "view"
  >;

  getUserVerificationTime: TypedContractMethod<[], [bigint], "view">;

  hasUserLikedBlog: TypedContractMethod<
    [slug: string, user: AddressLike],
    [boolean],
    "view"
  >;

  isAdult: TypedContractMethod<[], [boolean], "view">;

  isUserAdult: TypedContractMethod<[], [boolean], "view">;

  isUserVerified: TypedContractMethod<[], [boolean], "view">;

  isVerified: TypedContractMethod<[], [boolean], "view">;

  likeBlog: TypedContractMethod<
    [slug: string, user: AddressLike],
    [void],
    "nonpayable"
  >;

  linkZKContract: TypedContractMethod<
    [_zkContractAddr: AddressLike, userAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  publishBlog: TypedContractMethod<[slug: string], [void], "nonpayable">;

  updateAgentAddress: TypedContractMethod<
    [newAgentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBlog: TypedContractMethod<
    [slug: string, newBlobHash: string, newBlobId: string],
    [void],
    "nonpayable"
  >;

  updateBlogMeta: TypedContractMethod<
    [
      slug: string,
      newTags: string[],
      newStatus: BigNumberish,
      newReadabilityScore: BigNumberish,
      newEstimatedReadTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userAddress: TypedContractMethod<[], [string], "view">;

  userNullifier: TypedContractMethod<[], [bigint], "view">;

  verificationTimestamp: TypedContractMethod<[], [bigint], "view">;

  verifyUserProof: TypedContractMethod<
    [
      nullifierSeed: BigNumberish,
      nullifier: BigNumberish,
      timestamp: BigNumberish,
      revealArray: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      groth16Proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  zkContractAddr: TypedContractMethod<[], [string], "view">;

  zkFactoryAddr: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBlog"
  ): TypedContractMethod<
    [slug: string, blobId: string, blobHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "agentAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "anonAadhaarVerifierAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blogSlugs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "blogs"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, boolean, bigint, bigint, bigint] & {
        blobId: string;
        blobHash: string;
        isPublished: boolean;
        status: bigint;
        readabilityScore: bigint;
        estimatedReadTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createdTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteBlog"
  ): TypedContractMethod<[slug: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllBlogSlugs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBlogBySlug"
  ): TypedContractMethod<
    [slug: string],
    [UserContract.BlogStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserVerificationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasUserLikedBlog"
  ): TypedContractMethod<[slug: string, user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAdult"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserAdult"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserVerified"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVerified"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "likeBlog"
  ): TypedContractMethod<
    [slug: string, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "linkZKContract"
  ): TypedContractMethod<
    [_zkContractAddr: AddressLike, userAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "publishBlog"
  ): TypedContractMethod<[slug: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentAddress"
  ): TypedContractMethod<[newAgentAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBlog"
  ): TypedContractMethod<
    [slug: string, newBlobHash: string, newBlobId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBlogMeta"
  ): TypedContractMethod<
    [
      slug: string,
      newTags: string[],
      newStatus: BigNumberish,
      newReadabilityScore: BigNumberish,
      newEstimatedReadTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userNullifier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verificationTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyUserProof"
  ): TypedContractMethod<
    [
      nullifierSeed: BigNumberish,
      nullifier: BigNumberish,
      timestamp: BigNumberish,
      revealArray: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      groth16Proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zkContractAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zkFactoryAddr"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BlogAdded"
  ): TypedContractEvent<
    BlogAddedEvent.InputTuple,
    BlogAddedEvent.OutputTuple,
    BlogAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlogDeleted"
  ): TypedContractEvent<
    BlogDeletedEvent.InputTuple,
    BlogDeletedEvent.OutputTuple,
    BlogDeletedEvent.OutputObject
  >;
  getEvent(
    key: "BlogPublished"
  ): TypedContractEvent<
    BlogPublishedEvent.InputTuple,
    BlogPublishedEvent.OutputTuple,
    BlogPublishedEvent.OutputObject
  >;
  getEvent(
    key: "BlogUpdated"
  ): TypedContractEvent<
    BlogUpdatedEvent.InputTuple,
    BlogUpdatedEvent.OutputTuple,
    BlogUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;

  filters: {
    "BlogAdded(address,string,string,string,uint256)": TypedContractEvent<
      BlogAddedEvent.InputTuple,
      BlogAddedEvent.OutputTuple,
      BlogAddedEvent.OutputObject
    >;
    BlogAdded: TypedContractEvent<
      BlogAddedEvent.InputTuple,
      BlogAddedEvent.OutputTuple,
      BlogAddedEvent.OutputObject
    >;

    "BlogDeleted(address,string,uint256)": TypedContractEvent<
      BlogDeletedEvent.InputTuple,
      BlogDeletedEvent.OutputTuple,
      BlogDeletedEvent.OutputObject
    >;
    BlogDeleted: TypedContractEvent<
      BlogDeletedEvent.InputTuple,
      BlogDeletedEvent.OutputTuple,
      BlogDeletedEvent.OutputObject
    >;

    "BlogPublished(address,string,uint256)": TypedContractEvent<
      BlogPublishedEvent.InputTuple,
      BlogPublishedEvent.OutputTuple,
      BlogPublishedEvent.OutputObject
    >;
    BlogPublished: TypedContractEvent<
      BlogPublishedEvent.InputTuple,
      BlogPublishedEvent.OutputTuple,
      BlogPublishedEvent.OutputObject
    >;

    "BlogUpdated(address,string,string,string,uint256)": TypedContractEvent<
      BlogUpdatedEvent.InputTuple,
      BlogUpdatedEvent.OutputTuple,
      BlogUpdatedEvent.OutputObject
    >;
    BlogUpdated: TypedContractEvent<
      BlogUpdatedEvent.InputTuple,
      BlogUpdatedEvent.OutputTuple,
      BlogUpdatedEvent.OutputObject
    >;

    "UserVerified(address,uint256,bool)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
  };
}
