/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DKIMRegistry,
  DKIMRegistryInterface,
} from "../../../@zk-email/contracts/DKIMRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "domainName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "DKIMPublicKeyHashRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "DKIMPublicKeyHashRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "dkimPublicKeyHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "isDKIMPublicKeyHashValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "revokeDKIMPublicKeyHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "revokedDKIMPublicKeyHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "setDKIMPublicKeyHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
      {
        internalType: "bytes32[]",
        name: "publicKeyHashes",
        type: "bytes32[]",
      },
    ],
    name: "setDKIMPublicKeyHashes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ef0380380610ef0833981810160405281019061003291906101e2565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c919061021e565b60405180910390fd5b6100b4816100bb60201b60201c565b5050610239565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101af82610184565b9050919050565b6101bf816101a4565b81146101ca57600080fd5b50565b6000815190506101dc816101b6565b92915050565b6000602082840312156101f8576101f761017f565b5b6000610206848285016101cd565b91505092915050565b610218816101a4565b82525050565b6000602082019050610233600083018461020f565b92915050565b610ca8806102486000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461011e578063c15cffab1461013c578063e7a7977a14610158578063f2fde38b14610188578063f49eb164146101a457610093565b80630690bd381461009857806315d2512e146100c857806342d7cb98146100e4578063715018a614610114575b600080fd5b6100b260048036038101906100ad91906107f7565b6101c0565b6040516100bf919061086e565b60405180910390f35b6100e260048036038101906100dd9190610889565b610205565b005b6100fe60048036038101906100f99190610889565b610273565b60405161010b919061086e565b60405180910390f35b61011c610293565b005b6101266102a7565b60405161013391906108f7565b60405180910390f35b610156600480360381019061015191906107f7565b6102d0565b005b610172600480360381019061016d91906107f7565b6103bd565b60405161017f919061086e565b60405180910390f35b6101a2600480360381019061019d919061093e565b610444565b005b6101be60048036038101906101b99190610a33565b6104ca565b005b6001828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460ff1681565b61020d610514565b60016002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fb80fff2b4c6f3ddf804877927c77b2fe1871cecaa5ad43d2c7c42f417331f865816040516102689190610aba565b60405180910390a150565b60026020528060005260406000206000915054906101000a900460ff1681565b61029b610514565b6102a5600061059b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102d8610514565b6002600082815260200190815260200160002060009054906101000a900460ff1615610339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033090610b32565b60405180910390fd5b6001808360405161034a9190610bc3565b9081526020016040518091039020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f510dac88eaf2dfbd53904241fc199ad46b2063e6bf6c3fb291f8ce864366341982826040516103b1929190610c13565b60405180910390a15050565b60006002600083815260200190815260200160002060009054906101000a900460ff16156103ee576000905061043e565b6001836040516103fe9190610bc3565b9081526020016040518091039020600083815260200190815260200160002060009054906101000a900460ff1615610439576001905061043e565b600090505b92915050565b61044c610514565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104be5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016104b591906108f7565b60405180910390fd5b6104c78161059b565b50565b6104d2610514565b60005b815181101561050f57610502838383815181106104f5576104f4610c43565b5b60200260200101516102d0565b80806001019150506104d5565b505050565b61051c61065f565b73ffffffffffffffffffffffffffffffffffffffff1661053a6102a7565b73ffffffffffffffffffffffffffffffffffffffff16146105995761055d61065f565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161059091906108f7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106ce82610685565b810181811067ffffffffffffffff821117156106ed576106ec610696565b5b80604052505050565b6000610700610667565b905061070c82826106c5565b919050565b600067ffffffffffffffff82111561072c5761072b610696565b5b61073582610685565b9050602081019050919050565b82818337600083830152505050565b600061076461075f84610711565b6106f6565b9050828152602081018484840111156107805761077f610680565b5b61078b848285610742565b509392505050565b600082601f8301126107a8576107a761067b565b5b81356107b8848260208601610751565b91505092915050565b6000819050919050565b6107d4816107c1565b81146107df57600080fd5b50565b6000813590506107f1816107cb565b92915050565b6000806040838503121561080e5761080d610671565b5b600083013567ffffffffffffffff81111561082c5761082b610676565b5b61083885828601610793565b9250506020610849858286016107e2565b9150509250929050565b60008115159050919050565b61086881610853565b82525050565b6000602082019050610883600083018461085f565b92915050565b60006020828403121561089f5761089e610671565b5b60006108ad848285016107e2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e1826108b6565b9050919050565b6108f1816108d6565b82525050565b600060208201905061090c60008301846108e8565b92915050565b61091b816108d6565b811461092657600080fd5b50565b60008135905061093881610912565b92915050565b60006020828403121561095457610953610671565b5b600061096284828501610929565b91505092915050565b600067ffffffffffffffff82111561098657610985610696565b5b602082029050602081019050919050565b600080fd5b60006109af6109aa8461096b565b6106f6565b905080838252602082019050602084028301858111156109d2576109d1610997565b5b835b818110156109fb57806109e788826107e2565b8452602084019350506020810190506109d4565b5050509392505050565b600082601f830112610a1a57610a1961067b565b5b8135610a2a84826020860161099c565b91505092915050565b60008060408385031215610a4a57610a49610671565b5b600083013567ffffffffffffffff811115610a6857610a67610676565b5b610a7485828601610793565b925050602083013567ffffffffffffffff811115610a9557610a94610676565b5b610aa185828601610a05565b9150509250929050565b610ab4816107c1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b600082825260208201905092915050565b7f63616e6e6f7420736574207265766f6b6564207075626b657900000000000000600082015250565b6000610b1c601983610ad5565b9150610b2782610ae6565b602082019050919050565b60006020820190508181036000830152610b4b81610b0f565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610b86578082015181840152602081019050610b6b565b60008484015250505050565b6000610b9d82610b52565b610ba78185610b5d565b9350610bb7818560208601610b68565b80840191505092915050565b6000610bcf8284610b92565b915081905092915050565b6000610be582610b52565b610bef8185610ad5565b9350610bff818560208601610b68565b610c0881610685565b840191505092915050565b60006040820190508181036000830152610c2d8185610bda565b9050610c3c6020830184610aab565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220e76a5a52784d85f176e6737630e303f8edb6163584e25f3e8a474f587acfef2564736f6c63430008190033";

type DKIMRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DKIMRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DKIMRegistry__factory extends ContractFactory {
  constructor(...args: DKIMRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _signer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_signer, overrides || {});
  }
  override deploy(
    _signer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_signer, overrides || {}) as Promise<
      DKIMRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DKIMRegistry__factory {
    return super.connect(runner) as DKIMRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DKIMRegistryInterface {
    return new Interface(_abi) as DKIMRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DKIMRegistry {
    return new Contract(address, _abi, runner) as unknown as DKIMRegistry;
  }
}
